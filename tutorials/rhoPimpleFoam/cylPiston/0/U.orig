/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: dualFuelEngine addition to OpenFOAM v8
   \\    /   O peration     | Website:  https://github.com/StasF1/dualFuelEngine
    \\  /    A nd           | Version:  0.5.x-alpha
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include        "../../../resources/engineProperties/MAN-BW"

injValue        0.3; // Maximum injection mass flow rate [kg/m^3]

injDelay        20; // Injection delay after EVC [˚CA]

injDuration     30; // Injection duration [˚CA]

injLinearRamp   8; // Maximum injection mass flow rate reaching time [˚CA]

injReverseRamp  8; // Min injection mass flow rate reaching time [˚CA]

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

injStart        #calc "($EVO + $EVC + $injDelay)*$deltaTCA";

injLinearRampT  #calc "$injStart + $injLinearRamp*$deltaTCA";

injReverseRampT #calc "$injLinearRampT + ($injDuration - $injLinearRamp - $injReverseRamp)*$deltaTCA";

injFinish       #calc "$injReverseRampT + $injReverseRamp*$deltaTCA";

boundaryField
{
/* Inlet */
    "injection(X|Y)(m|p)"
    {
        type            flowRateInletVelocity;
        massFlowRate    table
        (
            ($injStart        0        ) /*    •────•     ├─ injValue */
            ($injLinearRampT  $injValue) /*   /      \    │           */
            ($injReverseRampT $injValue) /*  /        \   │           */
            ($injFinish       0        ) /* •          •  0           */
        );
    }
    "inlet(X|Y)(m|p)"
    {
        type            flowRateInletVelocity;
        massFlowRate
        {
            type             tableFile;
            format           csv;
            nHeaderLine      1;
            refColumn        0;
            componentColumns (1);
            mergeSeparators  no;
            file              "massFlowRate.csv";
        }
    }

/* Outlet */
    outlet
    {
        type            pressureInletOutletVelocity;
        value           uniform (0 0 0);
    }

/* Walls */
    "piston|valveHead"
    {
        type            movingWallVelocity;
        value           $internalField;
    }
    "valveStem|walls"
    {
        type            slip;
    }

/* ACMI patches */
    "(inner|outer)ACMI(1|2)_blockage"
    {
        type            slip;
    }
    "(inner|outer)ACMI(1|2)_couple"
    {
        type            cyclicACMI;
        value           uniform (0 0 0);
    }
}

// ************************************************************************* //
